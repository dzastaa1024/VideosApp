{"version":3,"sources":["apis/youtube.js","components/SearchBar/index.js","components/VideoDetail/index.js","components/VideoItem/index.js","components/VideoList/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchBar","state","value","handleChange","e","setState","target","handleSubmit","preventDefault","props","handleOnSubmit","this","className","onSubmit","type","onChange","Component","VideoDetail","clickedVideo","console","log","src","id","videoId","snippet","title","description","VideoItem","video","handleClick","onClick","thumbnails","default","url","VideoList","videos","map","key","App","inputValue","a","youtube","get","params","q","part","maxResults","process","response","data","items","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,0CCDUC,G,kNACnBC,MAAQ,CACNC,MAAO,I,EAGTC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,MAAOE,EAAEE,OAAOJ,S,EAIpBK,aAAe,SAACH,GACdA,EAAEI,iBACF,EAAKC,MAAMC,eAAe,EAAKT,MAAMC,Q,uDAG7B,IAAD,OACCA,EAAUS,KAAKV,MAAfC,MACR,OACE,yBAAKU,UAAU,cACb,0BAAMA,UAAU,UAAUC,SAAUF,KAAKJ,cACvC,yBAAKK,UAAU,SACb,gCACA,2BACEE,KAAK,OACLZ,MAAOA,EACPa,SAAU,SAACX,GAAD,OAAO,EAAKD,aAAaC,a,GA1BVY,cCAlBC,E,uKACT,IACAC,EAAiBP,KAAKF,MAAtBS,aAER,OADAC,QAAQC,IAAI,eAAgBF,GAE1B,6BACE,yBAAKN,UAAU,YACb,4BACES,IAAG,oCAA+BH,EAAaI,GAAGC,YAGtD,yBAAKX,UAAU,cACb,wBAAIA,UAAU,aAAaM,EAAaM,QAAQC,OAChD,2BAAIP,EAAaM,QAAQE,mB,GAbMV,aCCpBW,G,6KACT,IAAD,EACwBhB,KAAKF,MAA5BmB,EADD,EACCA,MAAOC,EADR,EACQA,YAEf,OACE,oCACE,yBACEjB,UAAU,kBACVkB,QAAS,WACPD,EAAYD,KAGd,yBACEhB,UAAU,WACVS,IAAG,UAAKO,EAAMJ,QAAQO,WAAWC,QAAQC,OAE3C,yBAAKrB,UAAU,WACb,yBAAKA,UAAU,UAAUgB,EAAMJ,QAAQC,c,GAjBZT,cCAlBkB,E,uKACT,IAAD,EACyBvB,KAAKF,MAA7B0B,EADD,EACCA,OAAQN,EADT,EACSA,YAChB,OACE,yBAAKjB,UAAU,2BACZuB,EAAOC,KAAI,SAACR,GACX,OACE,kBAAC,EAAD,CACEA,MAAOA,EACPS,IAAKT,EAAMN,GAAGC,QACdM,YAAaA,Y,GAVYb,aC6DxBsB,E,4MAvDbrC,MAAQ,CACNkC,OAAQ,GACRjB,aAAc,I,EAOhBX,a,uCAAe,WAAOgC,GAAP,eAAAC,EAAA,sEACUC,EAAgBC,IAAI,UAAW,CACpDC,OAAQ,CACNC,EAAGL,EACHM,KAAM,UACNC,WAAY,GACZhC,KAAM,QACNuB,IAAKU,6CAPI,OACPC,EADO,OAWb,EAAK3C,SAAS,CACZ8B,OAAQa,EAASC,KAAKC,MACtBhC,aAAc8B,EAASC,KAAKC,MAAM,KAbvB,2C,wDAiBfrB,YAAc,SAACX,GACbC,QAAQC,IAAI,qBAAsBF,GAClC,EAAKb,SAAS,CACZa,aAAcA,K,kEAvBhBP,KAAKJ,aAAa,U,+BA2BV,IAAD,EAC0BI,KAAKV,MAA9BkC,EADD,EACCA,OAAQjB,EADT,EACSA,aAEhB,OACE,yBAAKN,UAAU,iBACb,kBAAC,EAAD,CAAWF,eAAgBC,KAAKJ,eAChC,yBAAKK,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACZM,GAAgB,kBAAC,EAAD,CAAaA,aAAcA,KAE9C,yBAAKN,UAAU,oBACb,kBAAC,EAAD,CAAWuB,OAAQA,EAAQN,YAAalB,KAAKkB,iBARrD,WAYWM,EAAOgB,OAZlB,gB,GAtCYnC,aCIEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.280bced0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://www.googleapis.com/youtube/v3\",\n});\n","import React, { Component } from \"react\";\n\nexport default class SearchBar extends Component {\n  state = {\n    value: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.handleOnSubmit(this.state.value);\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"ui segment\">\n        <form className=\"ui form\" onSubmit={this.handleSubmit}>\n          <div className=\"field\">\n            <label></label>\n            <input\n              type=\"text\"\n              value={value}\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class VideoDetail extends Component {\n  render() {\n    const { clickedVideo } = this.props;\n    console.log(\"clickedVideo\", clickedVideo);\n    return (\n      <div>\n        <div className=\"ui embed\">\n          <iframe\n            src={`https://youtube.com/embed/${clickedVideo.id.videoId}`}\n          />\n        </div>\n        <div className=\"ui segment\">\n          <h4 className=\"ui header\">{clickedVideo.snippet.title}</h4>\n          <p>{clickedVideo.snippet.description}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./VideoItem.css\";\n\nexport default class VideoItem extends Component {\n  render() {\n    const { video, handleClick } = this.props;\n\n    return (\n      <>\n        <div\n          className=\"video-item item\"\n          onClick={() => {\n            handleClick(video);\n          }}\n        >\n          <img\n            className=\"ui image\"\n            src={`${video.snippet.thumbnails.default.url}`}\n          />\n          <div className=\"content\">\n            <div className=\"header\">{video.snippet.title}</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport VideoItem from \"../VideoItem\";\n\nexport default class VideoList extends Component {\n  render() {\n    const { videos, handleClick } = this.props;\n    return (\n      <div className=\"ui relaxed divided list\">\n        {videos.map((video) => {\n          return (\n            <VideoItem\n              video={video}\n              key={video.id.videoId}\n              handleClick={handleClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport * as youtube from \"./apis/youtube\";\nimport \"./App.css\";\n\nimport SearchBar from \"./components/SearchBar\";\nimport VideoDetail from \"./components/VideoDetail\";\nimport VideoList from \"./components/VideoList\";\n\nclass App extends Component {\n  state = {\n    videos: [],\n    clickedVideo: \"\",\n  };\n\n  componentDidMount() {\n    this.handleSubmit(\"love\");\n  }\n\n  handleSubmit = async (inputValue) => {\n    const response = await youtube.default.get(\"/search\", {\n      params: {\n        q: inputValue,\n        part: \"snippet\",\n        maxResults: 10,\n        type: \"video\",\n        key: process.env.REACT_APP_APIkey,\n      },\n    });\n\n    this.setState({\n      videos: response.data.items,\n      clickedVideo: response.data.items[0],\n    });\n  };\n\n  handleClick = (clickedVideo) => {\n    console.log(\"clickedVideo w app\", clickedVideo);\n    this.setState({\n      clickedVideo: clickedVideo,\n    });\n  };\n\n  render() {\n    const { videos, clickedVideo } = this.state;\n\n    return (\n      <div className=\"ui container \">\n        <SearchBar handleOnSubmit={this.handleSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              {clickedVideo && <VideoDetail clickedVideo={clickedVideo} />}\n            </div>\n            <div className=\"five wide column\">\n              <VideoList videos={videos} handleClick={this.handleClick} />\n            </div>\n          </div>\n        </div>\n        Founded {videos.length} videos.\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}